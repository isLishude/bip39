package main

import (
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

const url = "https://raw.githubusercontent.com/bitcoin/bips/master/bip-0039/"
const dirName = "internal/wordlist"

// path => export_name
var langs = map[string]string{
	"chinese_simplified":  "ChineseSimplified",
	"chinese_traditional": "ChineseTraditional",
	"english":             "English",
	"french":              "French",
	"italian":             "Italian",
	"japanese":            "Japanese",
	"korean":              "Korean",
	"spanish":             "Spanish",
	"czech":               "Czech",
	"portuguese":          "Portuguese",
}

const text = `// Code generated by "islishude/bip39/update-wordlist"; DO NOT EDIT.

package wordlist

var {{.Variable}} = []string{ 
{{ range .WordList }}{{if .}} "{{.}}", {{end}} 
{{ end}}
}
`

type Template struct {
	Variable string
	WordList []string
}

var filetpl = template.Must(template.New("data").Parse(text))

func updateWordlist(path, variable string) error {
	resp, err := http.Get(fmt.Sprintf("%s%s.txt", url, path))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	src, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	wfpath := fmt.Sprintf("%s/%s.go", dirName, path)
	wfile, err := os.OpenFile(wfpath, os.O_CREATE|os.O_TRUNC|os.O_RDWR, 0666)
	if err != nil {
		return err
	}
	defer wfile.Close()

	data := Template{WordList: strings.Split(string(src), "\n"), Variable: variable}
	return filetpl.Execute(wfile, data)
}

func main() {
	for path, name := range langs {
		log.Printf("Get %s's wordlist\n", name)
		if err := updateWordlist(path, name); err != nil {
			log.Fatalln(err)
		}
		log.Printf("Update %s's world list successful\n", name)
	}
	log.Println("Update successful!")
}
